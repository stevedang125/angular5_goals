

2.  app.component.html

      <app-home [propertyGoal]="goal" (customEvent)="customFunction($event)" ></app-home>

      <!-- @Output custom event binding: -->

              <!-- (customEvent)="customFunction($event)" -->

              <!-- ****************** SUPER IMPORTAN part: ********************************* -->
              <!-- the HomeComponent will need to add these in home.component.ts/export class
              import { Component, OnInit , Input, Output, EventEmitter } from '@angular/core';
              @Output() customEvent = new EventEmitter();
              fireTheCustomEvent(e) this is a (click)="fireTheCustomEvent($event)" for the view
                {
                  this.customEvent.emit(e);
                }

              -->
              <!-- ******************************************************************* -->

              <!-- <button (click)="fireTheCustomEvent($event)" >Click me !</button> -->

      <!-- @Input custom property binding: -->

              <!-- [custom Property] = "object/model in component.ts"  -->
              <!-- => [propertyGoal]="goal" -->

              <!-- passing the data in the object "goal" into [propertyGoal]
              so the HomeComponent can get the data out of this [propertyGoal] -->

              <!-- ****************** SUPER IMPORTAN part: ********************************* -->
              <!-- the HomeComponent will need to add these in home.component.ts/export class
              import { Component, OnInit , Input} from '@angular/core';
              @Input() propertyGoal; -->
              <!-- ******************************************************************* -->

              <!-- in the HomeComponent's view, use propertyGoal to access object goal variables -->

3. Setting up route(app.module.ts, app.component.ts)
  Step 1: import the library for route, create routes, import RouterModule.forRoot(appRoutes) into import:[]
  Step 2: import route to app.component.ts import { RouterModule, Routes } from '@angular/router';
  Step 3: use <route_outlet></route_outlet> tag in the app view

  import { RouterModule, Routes } from '@angular/router';
  const appRoutes: Routes = [
    { path: 'directory', component: DirectoryComponent },
    { path: '', component: HomeComponent },
    { path: '**', redirectTo: '', pathMatch: 'full' }
  ];
    imports: [
      BrowserModule,
      FormsModule,
      RouterModule.forRoot(appRoutes)
    ],;


4. After some css fun, add links to the nav bar: [routerLink]="['/pathInHere']"

   by using routerLink from Angular, so fast, yes so efficient <3
   <li> <a [routerLink]="['/']">Home</a> </li>
   <li> <a [routerLink]="['/directory']">Directory</a> </li>

5. Route Params: (import ActivatedRoute from angular/router in app.module.ts)

  import the ActivatedRoute library to the root app.module.ts and
  the component you want to get the route params(this case directory.component.ts)
  and into the constructor
        constructor(private route: ActivatedRoute)
        {
          this.return_id = route.snapshot.params['id'];
        }

  in the path, give the params a name:( like this path: 'directory/:id')
        const appRoutes: Routes = [
          { path: 'directory/:id', component: DirectoryComponent },
          { path: '', component: HomeComponent },
          { path: '**', redirectTo: '', pathMatch: 'full' }
        ];

  directory.component.ts

        import { ActivatedRoute } from '@angular/router';
        export class DirectoryComponent implements OnInit {
          // declare a var to assign the params to it.(return_id in this case)
          return_id: string;

          constructor(private route: ActivatedRoute)
          {
            this.return_id = route.snapshot.params['id'];
          }
6. Directives:
  1. Definition: They are instructions that tell Angular to do some fun stuff
    Example:
      <router-outlet></router-outlet>
      [routerLink]= "['/path']"
  2. Types of Directive:
  a) Attribute: expects an object in ""
      Interact with the element it's on to change it's properties
      Eg: ngClass expects an object so
          [ngClass]="{'object': true, 'object': true,'andmore': true}"


      [ngStyle]="{background: object.item}"

          in the component.ts file, if we declared an object like this:
          classes = {'blue': true, 'red': true, 'underline': true};
          <p [ngClass]="classes">
          simply pass the object ^^

  b) Structure:
      Change the structure of the HTML code: (my favvvvvvv :D)
      Eg: *ngIf="true/false" or a Boolean variable
       test = true; in component, then *ngIf="test"

7. *ngFor? for loop !!! yess
  1. cycle through a list and put the item out to the view.
   Eg: <li *ngFor="let x in list"></li> (list: collection of objects)
   {{x.item_from_list}}
   {{x.item1_from_list}}
   {{x.item2_from_list}}
 2. this will loop through an ARRAY, so in component:
 goals = [
  {small:  "Summer Internship.", big: "Full stack web dev. at Universal Studios.", color: "Green" },
  {small:  "Maintain good grades !", big: "MIT", color: "Blue" },
  {small:  "Be more healthy.", big: "Get buff", color: "Red" }
 ]
